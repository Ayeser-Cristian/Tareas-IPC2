{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "1.Listas enlazadas.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPGK1nD9INqi0qBIlg+ALDK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ayeser-Cristian/Tareas-IPC2/blob/main/Tarea-1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pvUgoAKhtr9N"
      },
      "source": [
        "##**Listas Enlazadas**\n",
        "**Definición de la clase Estudiante**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xTKsYpoAtx3S"
      },
      "source": [
        "class estudiante:\n",
        "  def __init__(self, carne, nombre, edad, direccion, telefono, email, carrera, puesto):\n",
        "    self.carne = carne\n",
        "    self.nombre = nombre\n",
        "    self.edad = edad\n",
        "    self.direccion = direccion\n",
        "    self.telefono = telefono\n",
        "    self.email = email\n",
        "    self.carrera = carrera\n",
        "    self.puesto = puesto\n",
        "\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VK9GCt2RzVrm"
      },
      "source": [
        "**Definición de la clase Nodo**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rbbug40BzdN8"
      },
      "source": [
        "class nodo:\n",
        "  def __init__(self, estudiante=None, siguiente=None):\n",
        "    self.estudiante = estudiante\n",
        "    self.siguiente = siguiente"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LziFcGl52_ow"
      },
      "source": [
        "**Definición de la clase Lista Enlazada**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q3Mk1Qqz3FYM"
      },
      "source": [
        "class lista_enlazada:\n",
        "    def __init__(self):\n",
        "      self.primero = None #se inicializa la lista\n",
        "\n",
        "    def insertar(self, estudiante):\n",
        "      if self.primero is None: #Si primero esta vacia.\n",
        "        self.primero = nodo(estudiante = estudiante) \n",
        "        return\n",
        "      actual = self.primero \n",
        "      while actual.siguiente: \n",
        "        actual = actual.siguiente \n",
        "      actual.siguiente = nodo(estudiante=estudiante)\n",
        "\n",
        "    def recorrer(self):\n",
        "      actual = self.primero\n",
        "      while actual != None:\n",
        "        print(\"carne: \", actual.estudiante.carne, \"nombre: \", actual.estudiante.nombre, \"email: \", actual.estudiante.email, \"->\" )\n",
        "        actual = actual.siguiente\n",
        "    \n",
        "    def eliminar(self, carne):\n",
        "      actual = self.primero\n",
        "      anterior = None\n",
        "      \n",
        "      while actual and actual.estudiante.carne != carne:\n",
        "        anterior = actual\n",
        "        actual = actual.siguiente\n",
        "      if anterior is None:\n",
        "        self.primero=actual.siguiente\n",
        "        actual.siguiente=None\n",
        "      elif actual:\n",
        "        anterior.siguiente=actual.siguiente\n",
        "        actual.siguiente=None\n",
        "\n",
        "    def buscar(self,carne):\n",
        "      actual=self.primero\n",
        "      while actual !=None: \n",
        "        if actual.estudiante.carne == carne:\n",
        "          print(\"carne: \", actual.estudiante.carne, \"nombre: \", actual.estudiante.nombre, \"email: \", actual.estudiante.email, \"->\" )\n",
        "          break \n",
        "        else:\n",
        "          actual = actual.siguiente\n",
        "      if actual==None:\n",
        "        print(\"Datos no encontrados\")\n",
        "\n",
        "    "
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "liV4b9Jpse3q"
      },
      "source": [
        "***Creación de objetos Estudiantes***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t6t4sM63snZ-"
      },
      "source": [
        "e1 = estudiante(201915059, \"Gerson Ortiz\", 20, \"9 calle 10-02 zona 1\", 24400101, \"gerson.ortiz@gmail.com\", \"Ingenieria en Sistemas\", \"Progaramador Jr\")\n",
        "e2 = estudiante(201915060, \"Karen Hurtarte\", 21, \"7 calle 10-02 zona 1\", 24400102, \"karen.hurtarte@gmail.com\", \"Ingenieria en Sistemas\", \"Progaramador Jr\")\n",
        "e3 = estudiante(201915061, \"Luis Mendez\", 22, \"8 calle 10-02 zona 1\", 24400103, \"luis.mendez@gmail.com\", \"Ingenieria en Sistemas\", \"Progaramador Jr\")"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QsO1tOB2trX9"
      },
      "source": [
        "***Inserción***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LC2aTUy_tujs"
      },
      "source": [
        "lista_e = lista_enlazada()\n",
        "lista_e.insertar(e1)\n",
        "lista_e.insertar(e2)\n",
        "lista_e.insertar(e3)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C9GzFatNwa5I"
      },
      "source": [
        "***Recorrer la Lista***\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nhvBWJDttNeQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "13dc7568-cd9e-40cb-d6aa-c634472344d3"
      },
      "source": [
        "lista_e.recorrer()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "carne:  201915059 nombre:  Gerson Ortiz email:  gerson.ortiz@gmail.com ->\n",
            "carne:  201915060 nombre:  Karen Hurtarte email:  karen.hurtarte@gmail.com ->\n",
            "carne:  201915061 nombre:  Luis Mendez email:  luis.mendez@gmail.com ->\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IstSye4Swjwr"
      },
      "source": [
        "***Eliminar un nodo de la lista***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z--XD6PWwrpI",
        "outputId": "11ed082f-4914-4f19-9532-ded9e2e6168a"
      },
      "source": [
        "lista_e.eliminar(201915060)\n",
        "lista_e.recorrer()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "carne:  201915059 nombre:  Gerson Ortiz email:  gerson.ortiz@gmail.com ->\n",
            "carne:  201915061 nombre:  Luis Mendez email:  luis.mendez@gmail.com ->\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iPNd2zNZA_Vp"
      },
      "source": [
        "***Busca un nodo de la lista***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u32CeoM9BC1v",
        "outputId": "2915139d-a6f4-438d-a769-c431b5167ee4"
      },
      "source": [
        "lista_e.buscar(201915059)\n",
        "lista_e.buscar(201915060) #Este dato fue eliminado anteriormente, por lo cual No se encontrará el dato\n",
        "lista_e.buscar(201915061)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "carne:  201915059 nombre:  Gerson Ortiz email:  gerson.ortiz@gmail.com ->\n",
            "Datos no encontrados\n",
            "carne:  201915061 nombre:  Luis Mendez email:  luis.mendez@gmail.com ->\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}